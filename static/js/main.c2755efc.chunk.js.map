{"version":3,"sources":["redux/contacts/contacts-action.js","redux/contacts/contacts-types.js","services/contactsAPI.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactsForm/StyledComponents.js","components/ContactsForm/ContactsForm.jsx","components/ContactsList/StyledComponents.js","components/ContactsList/ContactsList.jsx","components/Section/StyledComponents.js","components/Section/Section.jsx","components/ContactsFilter/StyledComponents.js","components/ContactsFilter/ContactsFilter.jsx","components/App.js","redux/contacts/contact-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","axios","defaults","baseURL","fetchContacts","a","get","data","addContact","contact","post","postData","deleteContact","id","delete","deleteData","dispatch","contactsAPI","then","catch","error","name","number","getContacts","state","contacts","getLoading","isLoading","getFilter","filter","getVisibleContacts","createSelector","toLowerCase","includes","Form","styled","form","FormLabel","label","Input","input","Button","button","ContactsForm","useDispatch","useState","setNameValue","setNumberValue","handleInputChange","event","target","value","resetInput","onSubmit","e","preventDefault","Number","isNaN","alert","contactsOperations","htmlFor","type","placeholder","onChange","TaskList","ul","TaskItem","li","TaskItemElements","p","ContactsList","visibleContacts","useSelector","contactsSelectors","useEffect","map","onClick","Section","section","Title","h2","SectionBlock","title","children","FilterBlock","div","Label","FilterContacts","contactsActions","App","color","height","width","length","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2mCAcaA,EAAuBC,YCdE,iCDezBC,EAAuBD,YCdE,iCDezBE,EAAqBF,YCdE,+BDgBvBG,EAAoBH,YCdE,8BDetBI,EAAoBJ,YCdE,8BDetBK,EAAkBL,YCdE,4BDgBpBM,EAAuBN,YCdE,iCDezBO,EAAuBP,YCdE,iCDezBQ,EAAqBR,YCdE,+BDgBvBS,EAAgBT,YCdC,mB,0CCV9BU,IAAMC,SAASC,QAAU,wBAElB,IAAMC,EAAa,uCAAG,8BAAAC,EAAA,sEACJJ,IAAMK,IAAI,aADN,uBACnBC,EADmB,EACnBA,KADmB,kBAGpBA,GAHoB,2CAAH,qDAMbC,EAAU,uCAAG,WAAMC,GAAN,eAAAJ,EAAA,sEACDJ,IAAMS,KAAK,YAAaD,GADvB,cAClBE,EADkB,yBAGjBA,GAHiB,2CAAH,sDAMVC,EAAa,uCAAG,WAAMC,GAAN,eAAAR,EAAA,sEACFJ,IAAMa,OAAN,oBAA0BD,IADxB,cACrBE,EADqB,yBAGpBA,GAHoB,2CAAH,sDCHbX,EAAgB,kBAAM,SAAAY,GACjCA,EAAS1B,KAET2B,IAEGC,MAAK,gBAAGX,EAAH,EAAGA,KAAH,OAAcS,EAASxB,EAAqBe,OACjDY,OAAM,SAAAC,GAAK,OAAIJ,EAASvB,EAAmB2B,SAGnCZ,EAAa,SAACa,EAAMC,GAAP,OAAkB,SAAAN,GAC1C,IAAMP,EAAU,CACdY,OACAC,UAGFN,EAAStB,KAETuB,EACcR,GACXS,MAAK,gBAAGX,EAAH,EAAGA,KAAH,OAAcS,EAASrB,EAAkBY,OAC9CY,OAAM,SAAAC,GAAK,OAAIJ,EAASpB,EAAgBwB,SAGhCR,EAAgB,SAAAC,GAAE,OAAI,SAAAG,GACjCA,EAASnB,KAEToB,EACiBJ,GACdK,MAAK,kBAAMF,EAASlB,EAAqBe,OACzCM,OAAM,SAAAC,GAAK,OAAIJ,EAASjB,EAAmBqB,S,QCxCnCG,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASA,UACtCC,EAAa,SAAAF,GAAK,OAAIA,EAAMC,SAASE,WACrCC,EAAY,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,QAEpCC,EAAqBC,YAChC,CAACR,EAAaK,IACd,SAACH,EAAUI,GAAX,OACEJ,EAASI,QAAO,SAAApB,GAAO,OACrBA,EAAQY,KAAKW,cAAcC,SAASJ,EAAOG,qB,mvBCRjD,IAAME,EAAOC,IAAOC,KAAV,KAMJC,EAAYF,IAAOG,MAAV,KAQTC,EAAQJ,IAAOK,MAAV,KAKLC,EAASN,IAAOO,OAAV,KCfG,SAASC,IACtB,IAAM3B,EAAW4B,cADoB,EAERC,mBAAS,IAFD,mBAE9BxB,EAF8B,KAExByB,EAFwB,OAGJD,mBAAS,IAHL,mBAG9BvB,EAH8B,KAGtByB,EAHsB,KAK/BC,EAAoB,SAAAC,GAAU,IAAD,EACTA,EAAMC,OAAtB7B,EADyB,EACzBA,KAAM8B,EADmB,EACnBA,MAEd,OAAQ9B,GACN,IAAK,OACHyB,EAAaK,GACb,MACF,IAAK,SACHJ,EAAeI,GACf,MACF,QACE,SAyBAC,EAAa,WACjBN,EAAa,IACbC,EAAe,KAGjB,OACE,eAACb,EAAD,CAAMmB,SA3BiB,SAAAC,GACvBA,EAAEC,iBACGlC,GAASC,EAKVkC,OAAOC,OAAOnC,GAChBoC,MAAM,2CAGN1C,EAAS2C,EAAmBnD,WAAWa,EAAMC,IAG9C8B,KAXCM,MAAM,sCAwBR,UACE,eAACrB,EAAD,CAAWxB,GAAG,OAAO+C,QAAQ,OAA7B,iBAEE,cAACrB,EAAD,CACEsB,KAAK,OACLxC,KAAK,OACL8B,MAAO9B,EACPyC,YAAY,aACZC,SAAUf,OAGd,eAACX,EAAD,CAAWxB,GAAG,SAAS+C,QAAQ,SAA/B,mBAEE,cAACrB,EAAD,CACElB,KAAK,SACLwC,KAAK,MACLV,MAAO7B,EACPwC,YAAY,qBACZC,SAAUf,OAGZ,cAACP,EAAD,CAAQoB,KAAK,SAAb,4B,i8BCxER,IAAMG,GAAW7B,IAAO8B,GAAV,MAIRC,GAAW/B,IAAOgC,GAAV,MAeRC,GAAmBjC,IAAOkC,EAAV,MAMhB5B,GAASN,IAAOO,OAAV,KCfG,SAAS4B,KACtB,IAAMtD,EAAW4B,cACX2B,EAAkBC,YAAYC,EAAkB3C,oBAItD,OAFA4C,qBAAU,kBAAM1D,EAAS2C,EAAmBvD,mBAAkB,CAACY,IAG7D,cAACgD,GAAD,UACGO,EAAgBI,KAAK,gBAAG9D,EAAH,EAAGA,GAAIQ,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACpB,eAAC4C,GAAD,WACE,eAACE,GAAD,WAAmB/C,EAAnB,QACA,cAAC+C,GAAD,UAAmB9C,IACnB,cAAC,GAAD,CAAQuC,KAAK,SAASe,QAAS,kBAAM5D,EAAS2C,EAAmB/C,cAAcC,KAA/E,sBAHaA,Q,8cCnBvB,IAAMgE,GAAU1C,IAAO2C,QAAV,MASPC,GAAQ5C,IAAO6C,GAAV,MCPI,SAASC,GAAT,GAA4C,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC5C,OACE,eAACN,GAAD,WACE,cAACE,GAAD,UAAQG,IACPC,K,ukBCNP,IAAMC,GAAcjD,IAAOkD,IAAV,MAKXC,GAAQnD,IAAOG,MAAV,MAQLyC,GAAQ5C,IAAOkC,EAAV,MAOL9B,GAAQJ,IAAOK,MAAV,MChBI,SAAS+C,KACxB,IAAMvE,EAAW4B,cACTf,EAAS2C,YAAYC,EAAkB7C,WAE7C,OACE,cAACwD,GAAD,UACE,eAACE,GAAD,WACE,cAAC,GAAD,oCACA,cAAC,GAAD,CACEzE,GAAG,SACHgD,KAAK,OACLV,MAAOtB,EACPkC,SAAU,SAAAd,GAAK,OAAIjC,EAASwE,EAAgBxF,cAAciD,EAAMC,OAAOC,gBCRlE,SAASsC,KACtB,IAAMzE,EAAW4B,cACVnB,EAAW+C,YAAYC,EAAkBlD,aAC1CI,EAAY6C,YAAYC,EAAkB/C,YAMhD,OAJAgD,qBAAU,WACR1D,EAAS2C,EAAmBvD,mBAC3B,CAACY,IAGF,mCACE,eAACiE,GAAD,CAAcC,MAAM,YAApB,UACE,cAACvC,EAAD,IAEEhB,EACF,cAAC,IAAD,CAAQkC,KAAK,QAAQ6B,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KACpD,KAGJ,cAAC,GAAD,IACCnE,EAASoE,OACV,cAACvB,GAAD,IACM,U,uDClBR7C,GAAWqE,YAAc,IAAD,sBAC3BtG,GAAuB,SAACuG,EAAD,YAAMC,WADF,gBAE3BrG,GAAoB,SAAC6B,EAAD,OAAUwE,EAAV,EAAUA,QAAV,6BAA4BxE,GAA5B,CAAmCwE,OAF5B,gBAG3BlG,GAAuB,SAAC0B,EAAD,OAAUwE,EAAV,EAAUA,QAAV,OACtBxE,EAAMK,QAAO,qBAAGhB,KAAgBmF,QAJN,KAOxBrE,GAAYmE,aAAc,GAAD,sBAC5BxG,GAAuB,kBAAM,KADD,gBAE5BE,GAAuB,kBAAM,KAFD,gBAG5BC,GAAqB,kBAAM,KAHC,gBAI5BC,GAAoB,kBAAM,KAJE,gBAK5BC,GAAoB,kBAAM,KALE,gBAM5BC,GAAkB,kBAAM,KANI,gBAO5BC,GAAuB,kBAAM,KAPD,gBAQ5BC,GAAuB,kBAAM,KARD,gBAS5BC,GAAqB,kBAAM,KATC,KAYzB8B,GAASiE,YAAc,GAAD,gBACzB9F,GAAgB,SAAC+F,EAAD,YAAMC,YAYVC,gBAAgB,CAC7BxE,YACAI,UACAF,eC5CIuE,GAAU,uBACXC,eADW,CAEdC,OAacC,GAVFC,YAAe,CAC3BC,QAAS,CACP9E,SAAU+E,IAEZC,UAAUC,EACVR,gBCRFS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,cAACZ,GAAD,QAGNqB,SAASC,eAAe,W","file":"static/js/main.c2755efc.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport {\n  FETCH_CONTACTS_REQUEST,\n  FETCH_CONTACTS_SUCCESS,\n  FETCH_CONTACTS_ERROR,\n  ADD_CONTACT_REQUEST,\n  ADD_CONTACT_SUCCESS,\n  ADD_CONTACT_ERROR,\n  DELETE_CONTACT_REQUEST,\n  DELETE_CONTACT_SUCCESS,\n  DELETE_CONTACT_ERROR,\n  FILTER_CONTACT,\n} from \"./contacts-types.js\";\n\nexport const fetchContactsRequest = createAction(FETCH_CONTACTS_REQUEST);\nexport const fetchContactsSuccess = createAction(FETCH_CONTACTS_SUCCESS);\nexport const fetchContactsError = createAction(FETCH_CONTACTS_ERROR);\n\nexport const addContactRequest = createAction(ADD_CONTACT_REQUEST);\nexport const addContactSuccess = createAction(ADD_CONTACT_SUCCESS);\nexport const addContactError = createAction(ADD_CONTACT_ERROR);\n\nexport const deleteContactRequest = createAction(DELETE_CONTACT_REQUEST);\nexport const deleteContactSuccess = createAction(DELETE_CONTACT_SUCCESS);\nexport const deleteContactError = createAction(DELETE_CONTACT_ERROR);\n\nexport const filterContact = createAction(FILTER_CONTACT);","export const FETCH_CONTACTS_REQUEST = 'contacts/fetchContactsRequest';\r\nexport const FETCH_CONTACTS_SUCCESS = 'contacts/fetchContactsSuccess';\r\nexport const FETCH_CONTACTS_ERROR = 'contacts/fetchContactsError';\r\n\r\nexport const ADD_CONTACT_REQUEST = 'contacts/addContactRequest';\r\nexport const ADD_CONTACT_SUCCESS = 'contacts/addContactSuccess';\r\nexport const ADD_CONTACT_ERROR = 'contacts/addContactError';\r\n\r\nexport const DELETE_CONTACT_REQUEST = 'contacts/deleteContactRequest';\r\nexport const DELETE_CONTACT_SUCCESS = 'contacts/deleteContactSuccess';\r\nexport const DELETE_CONTACT_ERROR = 'contacts/deleteContactError';\r\n\r\nexport const FILTER_CONTACT = 'contacts/filter';","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = async () => {\r\n  const { data } = await axios.get('/contacts');\r\n\r\n  return data;\r\n};\r\n\r\nexport const addContact = async contact => {\r\n  const postData = await axios.post('/contacts', contact);\r\n\r\n  return postData;\r\n}; \r\n\r\nexport const deleteContact = async id => {\r\n  const deleteData = await axios.delete(`/contacts/${id}`);\r\n\r\n  return deleteData;\r\n};","import {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-action';\r\nimport * as contactsAPI from '../../services/contactsAPI';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  contactsAPI\r\n    .fetchContacts()\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  contactsAPI\r\n    .addContact(contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  contactsAPI\r\n    .deleteContact(id)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.contacts;\r\nexport const getLoading = state => state.contacts.isLoading;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) =>\r\n    contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    ),\r\n);\r\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\nconst FormLabel = styled.label`\n  width: 85%;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-around;\n  font-weight: 500;\n  color: #ff18cd;\n`;\nconst Input = styled.input`\n  height: 15px;\n  width: 250px;\n`;\n\nconst Button = styled.button`\n  padding: 2px 10px;\n  max-width: 250px;\n  height: 30px;\n  background-color: #fff418;\n  border: none;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  :hover {\n    transform: scale(1.2);\n  }\n`;\n\nexport { Form, FormLabel, Input, Button };\n","import { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport {  useDispatch } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\nimport { Form, FormLabel, Input, Button } from './StyledComponents';\n\nexport default function ContactsForm() {\n  const dispatch = useDispatch();\n  const [name, setNameValue] = useState('');\n  const [number, setNumberValue] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setNameValue(value);\n        break;\n      case 'number':\n        setNumberValue(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    if (!name || !number) {\n      alert('You have not entered all the data');\n      return;\n    }\n\n    if (Number.isNaN(+number)) {\n      alert('Phone number must contain only numbers');\n      return;\n    } else {\n      dispatch(contactsOperations.addContact(name, number));\n   \n    }\n     resetInput()\n    // setNameValue('');\n    // setNumberValue('');\n     \n  };\n  \n\n  const resetInput = () => {\n    setNameValue('');\n    setNumberValue('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmitForm}>\n      <FormLabel id=\"name\" htmlFor=\"name\">\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter name\"\n          onChange={handleInputChange}\n        />\n      </FormLabel>\n      <FormLabel id=\"number\" htmlFor=\"number\">\n        Number\n        <Input\n          name=\"number\"\n          type=\"tel\"\n          value={number}\n          placeholder=\"Enter phone number\"\n          onChange={handleInputChange}\n        />\n      </FormLabel>\n        <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n\n// ContactsForm.propTypes = {\n//   addContact: PropTypes.func.isRequired,\n// };\n","import styled from 'styled-components';\n\nconst TaskList = styled.ul`\n  max-width: 700px;\n  margin: 0 auto;\n`;\nconst TaskItem = styled.li`\n  padding: 5px 5px 5px 5px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  /* background-color:grey; */\n  background-color: #fff;\n  :not(:nth-child(odd)) {\n    background-color: #cacaca;\n  }\n  border: 1px solid black;\n  border-radius: 0.5rem;\n  margin-bottom: 10px;\n  box-shadow: 10px 5px 5px grey;\n`;\nconst TaskItemElements = styled.p`\n  font-weight: 500;\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Button = styled.button`\n  padding: 5px 10px;\n  max-width: 200px;\n  height: 20px;\n  background-color: goldenrod;\n  border: none;\n  border-radius: 0.5rem;\n  font-size: 0.6rem;\n  color: #fff;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\nexport { TaskList, TaskItem, TaskItemElements, Button };\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts'\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport {\n  TaskList,\n  TaskItem,\n  TaskItemElements,\n  Button,\n} from './StyledComponents';\n\nexport default function ContactsList() {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(contactsSelectors.getVisibleContacts);\n  \n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n  \n  return (\n    <TaskList>\n      {visibleContacts.map (({ id, name, number }) => (\n        <TaskItem key={id}>\n          <TaskItemElements>{name} :</TaskItemElements>\n          <TaskItemElements>{number}</TaskItemElements>\n          <Button type=\"button\" onClick={() => dispatch(contactsOperations.deleteContact(id))}>\n            Delete\n          </Button>\n        </TaskItem>\n      ))}\n    </TaskList>\n  );\n}\n\n// ContactsList.propTypes = {\n//   items: PropTypes.array.isRequired,\n//   onDeleteContact: PropTypes.func,\n// };\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  padding: 20px 0px 20px;\n  max-width: 600px;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  background-color: #18f0ff;\n`;\nconst Title = styled.h2`\n  width: 100%;\n  text-align: center;\n  font-size: 2rem;\n  color: #1834ff;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 40px;\n`;\n\nexport { Section, Title };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Title } from './StyledComponents';\n\nexport default function SectionBlock({ title, children }) {\n  return (\n    <Section>\n      <Title>{title}</Title>\n      {children}\n    </Section>\n  );\n}\n\nSectionBlock.propTypes = {\n  title: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nconst FilterBlock = styled.div`\n  width: 100%;\n  padding-bottom: 20px;\n  margin-top: 10px;\n`;\nconst Label = styled.label`\n  width: 100%;\n  font-weight: 500;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nconst Title = styled.p`\n  width: 100%;\n  /* text-align:center; */\n  margin-bottom: 5px;\n  margin-left: 205px;\n  color: #ff188c;\n`;\nconst Input = styled.input`\n  width: 30%;\n`;\nexport { FilterBlock, Label, Title, Input };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\nimport { FilterBlock, Label, Title, Input } from './StyledComponents';\n\nexport default function FilterContacts() {\nconst dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  return (\n    <FilterBlock>\n      <Label>\n        <Title>Find Contacts by name</Title>\n        <Input\n          id=\"filter\"\n          type=\"text\"\n          value={filter}\n          onChange={event => dispatch(contactsActions.filterContact(event.target.value))}\n        />\n      </Label>\n    </FilterBlock>\n  );\n}\n\nFilterContacts.propTypes = {\n  OnInputFilter: PropTypes.func,\n  value: PropTypes.string,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\nimport { contactsSelectors, contactsOperations } from '../redux/contacts';\nimport ContactsForm from './ContactsForm/ContactsForm';\nimport ContactsList from './ContactsList/ContactsList';\nimport SectionBlock from './Section/Section';\nimport ContactsFilter from './ContactsFilter/ContactsFilter';\n\nexport default function App() {\n  const dispatch = useDispatch();\n   const contacts = useSelector(contactsSelectors.getContacts);\n  const isLoading = useSelector(contactsSelectors.getLoading);\n  \n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n  \n  return (\n    <>\n      <SectionBlock title=\"Phonebook\">\n        <ContactsForm />\n        \n         {isLoading ? (\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={30} width={30} />\n        ) : null}\n\n        \n        <ContactsFilter />\n        {contacts.length ? (\n        <ContactsList />\n          ) : null}\n      </SectionBlock>\n    </>\n  );\n}\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContact,\n} from './contacts-action';\n\nconst contacts = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst isLoading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [filterContact]: (_, { payload }) => payload,\n});\n\n// const error = createReducer(null, {\n//   [fetchContactsError]: (_, { payload }) => payload,\n//   [addContactError]: (_, { payload }) => payload,\n//   [deleteContactError]: (_, { payload }) => payload,\n//   [fetchContactsRequest]: () => null,\n//   [addContactRequest]: () => null,\n//   [deleteContactRequest]: () => null,\n// });\n\nexport default combineReducers({\n  contacts,\n  filter,\n  isLoading,\n  // error,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport contactsReducer from './contacts/contact-reducer';\n\n\nconst middleware = [\n  ...getDefaultMiddleware(),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default  store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}